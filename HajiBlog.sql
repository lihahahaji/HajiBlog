/*
 Navicat Premium Data Transfer

 Source Server         : 本地服务器
 Source Server Type    : MySQL
 Source Server Version : 50743 (5.7.43)
 Source Host           : localhost:3306
 Source Schema         : HajiBlog

 Target Server Type    : MySQL
 Target Server Version : 50743 (5.7.43)
 File Encoding         : 65001

 Date: 09/09/2023 15:52:35
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `article_id` int(10) NOT NULL AUTO_INCREMENT,
  `article_title` varchar(255) DEFAULT NULL,
  `article_content` text,
  PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
BEGIN;
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (1, 'Homebrew 常用命令', '# Homebrew 常用命令\n\n1. 安装软件包：\n\n    ```\n    brew install <package-name>\n    ```\n\n2. 卸载软件包：\n\n    ```\n    brew uninstall <package-name>\n    ```\n\n3. 更新 Homebrew 及已安装的软件包列表：\n\n    ```\n    brew update\n    ```\n\n4. 更新已安装的软件包：\n\n    ```\n    brew upgrade\n    ```\n\n5. 查看已安装的软件包：\n\n    ```\n    brew list\n    ```\n\n6. 查看特定软件包的信息：\n\n    ```\n    brew info <package-name>\n    ```\n\n7. 搜索可用的软件包：\n\n    ```\n    brew search <keyword>\n    ```\n\n8. 清理不需要的版本及缓存文件：\n\n    ```\n    brew cleanup\n    ```\n\n9. 显示当前安装的软件包是否有需要更新的：\n\n    ```\n    brew outdated\n    ```\n\n10. 查看 Homebrew 的诊断信息：\n\n    ```\n    brew doctor\n    ```\n\n11. 显示已安装的软件包数量和状态：\n\n    ```\n    brew list --versions\n    ```\n\n12. 为已安装的软件包创建快捷方式：\n\n    ```\n    brew link <package-name>\n    ```\n\n13. 解除已安装软件包的快捷方式：\n\n    ```\n    brew unlink <package-name>\n    ```\n\n14. 显示 Homebrew 的版本信息：\n\n    ```\n    brew --version\n    ```\n\n这些是一些常用的 Homebrew 命令，可以帮助你在 macOS 上方便地管理软件包。你可以根据自己的需要使用这些命令来安装、更新、卸载和管理软件包。\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (2, '函数微分学的几何应用', '# 函数微分学的几何应用\n\n## 1. 函数的极值点\n\n极值点处不一定是连续的，但是要求极值点两侧的函数有定义，即极值点也可以是间断点。\n\n求某函数的极值点：\n\n1. 求一阶导数 找到 （1）导数等于0的点 （2）不可导点 （3）分段函数的分段点\n2. 求这些点左右侧的导数值 来判断属于极大值还是极小值\n\n## 2. 函数的拐点\n\n拐点是 **连续** 曲线上的凹弧和凸弧的分界点，拐点不一定可导，且如果拐点二阶可导的话，其导函数的值一定为0\n注意 拐点应表示为 **(x,f(x))**\n\n求某函数的极值点：\n\n1. 求二阶导数为 0 的点 或者二阶导数不存在的点\n2. 求这些左右侧导数的导数值或者求该点的三阶导数的导数值\n\n## 3. 函数的渐近线\n\n**铅锤渐近线** 就是与 x 轴垂直的渐近线\n\n$\\lim_{x\\to x_0} f(x)=\\infty$\n\n**水平渐近线** 就是与 x 轴水平的渐近线\n\n$\\lim_{x\\to \\infin} f(x)=y$\n\n**斜渐进线** 即\n$\\lim_{x\\to+\\infin}\\frac{f(x)}{x}=a_1 , \\lim_{x\\to+\\infin}[f(x)-a_1x]=b_1$\n\n$\\lim_{x\\to-\\infin}\\frac{f(x)}{x}=a_2 , \\lim_{x\\to-\\infin}[f(x)-a_1x]=b_2$\n\n或者上述两式的 $a_1$ 和 $b_1$ 相等\n其中 $a_1\\not ={0}$\n\n\n求某函数的渐近线：\n\n1. 先找 **铅锤渐近线** （函数的无定义点）\n2. 再找 **水平渐近线** \n3. 再找 **斜渐近线**\n\n\n## 4. 求最值\n\n找以下几种点求函数值\n\n1. 导数为零的点（驻点）\n2. 不可导点（导函数不存在的点）\n3. 函数定义区间的端点 （如果是开区间的话 则求函数区间两端的单侧极限）\n\n\n## 5.作函数的图形\n\n1. 先观察函数的奇偶性（若存在奇偶性可以少一半的计算量）\n2. 分别求一阶导数和二阶导数\n3. 求出以下点\n    1. $f(x)$ 无定义\n    2. $f\'(x) = 0$ \n    3. $f\'(x)$ 无定义\n    4. $f\'\'(x)=0$ \n    5. $f\'\'(x)$ 无定义\n4. 根据以上的点将定义域划分为若干个子区间\n5. 确定函数图形在各个子区间上的单调性和凹凸性\n6. 确定函数的极值点和拐点\n7. 确定函数的渐近线（如果有的话）\n8. 做出函数图形');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (3, '在MacOS中安装latex环境', '# 在MacOS中安装latex环境\n\n在 macOS 上安装 TeXLive，你可以按照以下步骤进行操作：\n\n1. 打开终端：\n\n    - 你可以在“应用程序”文件夹中找到“实用工具”文件夹，然后双击打开“终端”。\n\n2. 使用 Homebrew 安装 TeXLive（推荐）：\n\n    - 如果你还没有安装 Homebrew，可以在终端中输入以下命令来安装 Homebrew：\n\n        ```\n        bashCopy code\n        /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n        ```\n\n    - 安装 Homebrew 后，可以使用以下命令来安装 TeXLive：\n\n        ```\n        cssCopy code\n        brew install --cask mactex-no-gui\n        ```\n\n3. 手动安装 TeXLive：\n\n    - 访问 TeXLive 官方网站：https://www.tug.org/texlive/acquire-netinstall.html\n\n    - 下载 `install-tl-unx.tar.gz`，这是一个安装脚本。\n\n    - 在终端中，进入下载目录并解压缩文件，然后进入解压缩后的文件夹：\n\n        ```\n        bashCopy code\n        tar -xvf install-tl-unx.tar.gz\n        cd install-tl-<版本号>\n        ```\n\n    - 运行安装脚本，建议使用 sudo 权限来执行以获得系统权限：\n\n        ```\n        bashCopy code\n        sudo ./install-tl\n        ```\n\n    - 按照提示进行安装。你可以选择默认设置，或者根据需要进行自定义配置。\n\n4. 完成安装后，可以在终端中运行以下命令来确认 TeXLive 是否成功安装：\n\n    ```\n    cssCopy code\n    pdflatex --version\n    ```\n\n注意：在 macOS 上使用 TeXLive 可能需要一些时间进行下载和安装，特别是在手动安装时。请确保你的网络连接稳定。\n\n无论你选择哪种安装方法，安装完成后，你就可以在终端中运行 TeXLive 中的各种 TeX 工具，例如 `pdflatex`、`xelatex` 等来编译 LaTeX 文档了。如果你希望使用图形界面来编辑 LaTeX 文档，你还可以安装一些 LaTeX 编辑器，如 TeXShop、TeXstudio 等。');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (4, '源码编译安装TensorFlow', '# 使用源码编译安装TensorFlow\n\n## 1 安装 Python 和 TensorFlow 软件包依赖项\n\n```\nsudo apt install python3-dev python3-pip\n```\n\n## 2 安装 TensorFlow pip 软件包依赖项\n\n```\npip install -U --user pip numpy wheel\npip install -U --user keras_preprocessing --no-deps\n```\n\n## 3 安装 Bazel\n\n首先安装必要的依赖\n\n```\napt install g++ unzip zip\n```\n\n然后安装java环境\n\n```\napt-get install openjdk-11-jdk\n```\n\n下载[bazel的源码](https://mirrors.huaweicloud.com/bazel/)，注意下载xxxxx.dist格式的，根据自己版本可以从[这里](https://mirrors.huaweicloud.com/bazel/)选择\n\n然后解压代码后进入文件内部，执行：\n\n```\nsudo bash ./compile.sh\n```\n\n等待编译结果通过，最后会提示你bazel二进制文件位置。\n\n![image-20230831105857772](assets/image-20230831105857772.png)\n\n\n\n如果出现报错:\n\n```\nERROR: /home/haji/bazel-6/src/BUILD:74:10: Symlinking //src:zip_builtins [for tool] failed: failed to create symbolic link \'bazel-out/k8-opt-exec-EDC14992/bin/src/zip_builtins\': file \'src/zip_builtins.sh\' is not executable\nTarget //src:bazel_nojdk failed to build\nINFO: Elapsed time: 93.692s, Critical Path: 61.61s\nINFO: 573 processes: 144 internal, 429 local.\nFAILED: Build did NOT complete successfully\n```\n\n是权限问题,可以根据提示添加对应的权限\n\n```\ncd src\nchmod 777 zip_builtins.sh\n```\n\n------\n\nbazel是免安装的，可以编辑\n\n```\nsudo code ~/.bashrc\n```\n\n然后在最后一行添加,这里`...` 省略了路径,根据自己的情况添加即可\n\n```\nalias bazel=.../output/bazel\n\n# 例如\nalias bazel=/home/haji/bazel-6/output/bazel\n```\n\n保存后\n\n```\nsource ~/.bashrc\n```\n\n安装完成,查看 bazel 版本\n\n```\nbazel version\n```\n\n如果 tensorflow 编译的时候找不到 bazel 的话,将 bazel 的二进制文件复制到这个目录下\n\n```\n/usr/local/lib/bazel/bin\n```\n\n\n\n## 4 安装 cudnn 11.1\n\n[下载对应的cudnn版本](https://developer.nvidia.com/rdp/cudnn-archive)\n\n![image-20230901092529960](assets/image-20230901092529960.png)\n\n选择 library 下载\n\n执行以下代码 将对应的头文件等复制到 cuda 目录下\n\n```\ncp -d cuda/include/cudnn*.h /usr/local/cuda-11.1/include\ncp -d cuda/lib64/libcudnn* /usr/local/cuda-11.1/lib64\nchmod a+r /usr/local/cuda-11.1/include/cudnn*.h /usr/local/cuda-11.1/lib64/libcudnn*\n```\n\n\n\n## 5 安装 clang\n\n```\napt update\napt install clang\n```\n\n\n\n## 6 下载 TensorRT\n\n[下载地址](https://developer.nvidia.com/nvidia-tensorrt-8x-download)\n\n下载对应版本的 TensorRT\n\n\n\n\n\n## 6  通过 bazel 来编译 pip 的安装包, 然后通过 pip 安装\n\n```\nbazel build --config=opt //tensorflow/tools/pip_package:build_pip_package\n```\n\n```\nbazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n```\n\n```\npip install /tmp/tensorflow_pkg/tensorflow-1.3.0-cp27-none-linux_x86_64.whl\n```\n\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (5, 'localStorage', '# localStorage\n\n将数据存储到浏览器内存中\n\n```js\n// 将用户信息存入浏览器内存\nlocalStorage.setItem(\'userInfo\', JSON.stringify(this.userInfo));\n```\n\n\n\n移除数据\n\n```js\n// 将用户信息在浏览器内存上清除\nlocalStorage.removeItem(\'userInfo\')\n```\n\n\n\n取用数据\n\n```js\nthis.user = localStorage.getItem(\'userInfo\')\n```\n\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (8, 'Element Plus ', '# Element Plus \n\n## 1 使用 npm 安装\n\n```shell\nnpm install element-plus --save\n```\n\n## ');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (9, 'V-for', '# V-for\n\n`v-for` 是 Vue.js 模板中的一个指令，用于在模板中进行循环渲染，通常用于遍历数组或对象的元素，并生成相应的 DOM 元素。以下是 `v-for` 的基本用法：\n\n**遍历数组元素：**\n\n```html\n<ul>\n  <li v-for=\"item in items\">{{ item }}</li>\n</ul>\n```\n\n上述代码中，`v-for` 指令遍历名为 `items` 的数组，并为数组中的每个元素创建一个 `<li>` 元素。`item` 是当前迭代的数组元素，在每次迭代中都会被设置为数组中的不同元素，然后使用 `{{ item }}` 插值将其渲染到列表项中。\n\n**遍历数组元素及索引：**\n\n有时你可能还需要访问元素的索引，可以像这样做：\n\n```html\n<ul>\n  <li v-for=\"(item, index) in items\">{{ index }}: {{ item }}</li>\n</ul>\n```\n\n在这个示例中，除了 `item`，我们还有一个名为 `index` 的变量，它包含当前元素的索引。\n\n**遍历对象属性：**\n\n`v-for` 也可以用于遍历对象的属性：\n\n```html\n<ul>\n  <li v-for=\"(value, key) in object\">{{ key }}: {{ value }}</li>\n</ul>\n```\n\n在这里，`key` 包含当前属性的键，`value` 包含当前属性的值。\n\n**使用 `v-for` 的带条件渲染：**\n\n你可以使用 `v-if` 和 `v-else` 结合 `v-for` 来进行条件渲染，例如只渲染满足特定条件的元素：\n\n```html\n<ul>\n  <li v-for=\"item in items\" v-if=\"item.completed\">{{ item.text }}</li>\n</ul>\n```\n\n在这个示例中，只有在 `item.completed` 为 `true` 时，`<li>` 元素才会被渲染。\n\n这只是 `v-for` 的一些基本用法示例。它非常强大且灵活，可以根据需要进行多种变化和组合，以实现各种复杂的渲染需求。');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (11, 'VUE2 入门', '# VUE2 入门\n\n##  安装\n\n### CDN安装\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js\"></script>\n```\n\n## ');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (17, 'Spring Boot 请求出现非法字符', '# Spring Boot 请求出现非法字符\n\n最近在做一个使用 markdown 编辑器的博客系统, 前端传回的数据中会有 `[{}]^`等字符, 在高版本的 tomcat 中, 这些字符是不符合RFC 7230和RFC 3986标准的, 所以请求会被拦截.\n\n报错:\n\n```\nInvalid character found in the request target\n```\n\n\n\n解决方案:\n\n在 springboot 的启动类中添加以下内容:\n\n```java\n@Bean\npublic ConfigurableServletWebServerFactory webServerFactory() {\n    TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n    factory.addConnectorCustomizers(new TomcatConnectorCustomizer() {\n        public void customize(Connector connector) {\n            connector.setProperty(\"relaxedQueryChars\", \"\\\"<>[\\\\]^`{|}\");\n        }\n    });\n    return factory;\n}\n```\n\n![image-20230908101737243](assets/image-20230908101737243.png)');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (18, 'Mybatis-plus 打印 SQL 语句', '# Mybatis-plus 打印 SQL 语句\n\n在`application.yml` 中添加以下配置\n\n```yml\n#mybatis-plus配置控制台打印完整带参数SQL语句\nmybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n```\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (20, '在后端解决跨域问题', '# 在后端解决跨域问题\n\n在 `util` 包下实现一个`CORSConfiguration` 类\n\n```java\npackage com.haji.week_3_server.util;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CORSConfiguration implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOriginPatterns(\"*\")\n                .allowedMethods(\"GET\",\"POST\",\"PUT\",\"HEAD\")\n                .allowCredentials(true)\n                .allowedHeaders(\"*\")\n                .maxAge(3600);\n    }\n}\n\n```\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (21, '在latex中使用中文', '# 在latex中使用中文\n\n## 方法1\n\n```latex\n%test.tex \n\\documentclass{article}\n\\usepackage{CJKutf8}\n\\begin{document}\n\\begin{CJK}{UTF8}{gbsn}\n这是一个CJKutf8的例子，使用的字体是gbsn。\n\\end{CJK}\n\\end{document}\n\n```\n\n## 方法2\n\n```latex\n\\documentclass[a4paper]{article}\n\\usepackage{CJKutf8}\n \n\\begin{document}\n \n\\begin{CJK}{UTF8}{gkai}\n楷体中文: 你好，中国。\n\\end{CJK}\n \n\\begin{CJK}{UTF8}{gbsn}\n宋体中文： 你好，中国。\n\\end{CJK}\n \n\\begin{CJK}{UTF8}{bkai}\n楷體中文繁體字：妳好，中國\n\\end{CJK}\n \n\\begin{CJK}{UTF8}{bsmi}\n明體中文繁體字： 妳好，中國\n\\end{CJK}\n \n\\end{document}\n```\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (22, 'JDBC', '# JDBC\n\nJava Database Connectivity 即 java 数据库连接\n\n## 在 java 中使用 jdbc\n\n1. 添加 jar 包\n    在工程目录下创建 lib 目录，\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (26, 'Linux 查找文件', '# Linux 查找文件\n\n\n\n以下命令会在 `/etc` 目录下查找名为`nginx.conf`的文件\n\n```shell\nsudo find /etc -type f -name \"nginx.conf\" \n```\n\n```\nsudo find / -type f -name \"id_rsa.pub\" \n```\n');
INSERT INTO `article` (`article_id`, `article_title`, `article_content`) VALUES (27, 'Linux 系统目录', '# Linux 系统目录\n\n![image-20230828165607168](assets/image-20230828165607168.png)\n\n1. **/ (根目录)**：整个文件系统的根目录，包含了所有其他目录和文件。\n\n2. **/bin (二进制目录)**：包含了系统启动和运行所需的**基本命令**，例如ls、cp、mv等。\n\n3. **/boot (启动目录)**：包含了启动Linux系统所需的内核文件和引导加载程序。\n\n4. **/dev (设备目录)**：包含了设备文件，Linux中一切皆文件，包括硬件设备。例如，硬盘、终端、打印机等设备都以文件形式存在于/dev目录下。\n\n5. **/etc (配置目录)**：包含系统的全局配置文件，例如网络配置、用户配置、服务配置等。\n\n6. **/home (用户目录)**：每个用户的主目录，通常以用户名命名，用户可以在此目录下存储自己的文件和配置。\n\n7. **/lib (库目录)**：包含系统运行时所需的共享库文件，通常是一些系统库。\n\n8. **/media (媒体目录)**：用于挂载可移动媒体设备，例如USB驱动器、CD-ROM等。\n\n9. **/mnt (挂载目录)**：临时挂载其他文件系统的目录，通常用于挂载其他硬盘分区。\n\n10. **/opt (可选目录)**：用于安装可选的第三方应用程序，通常将它们安装在/opt目录下。\n\n11. **/proc (进程目录)**：虚拟文件系统，提供关于当前系统进程的信息。\n\n12. **/root (超级用户目录)**：超级用户（root）的主目录。\n\n13. **/sbin (系统二进制目录)**：包含一些系统管理命令，通常只有超级用户能够执行。\n\n14. **/srv (服务目录)**：用于存放特定服务的数据文件，例如Web服务器或FTP服务器。\n\n15. **/tmp (临时目录)**：用于存放临时文件，任何用户都可以在这里创建文件，但文件可能会在系统重启时被清除。\n\n16. **/usr (用户目录)**：包含用户安装的软件、库文件、文档等。通常包含了系统广泛使用的程序和数据。\n\n17. **/var (可变目录)**：包含经常变化的数据文件，例如日志文件、缓存文件和邮件。\n\n18. **/run (运行时目录)**：包含运行时文件，例如pid文件和锁文件，用于存放正在运行的系统进程的信息。\n\n这些是Linux系统中一些常见目录的概述。每个目录都有其独特的用途，有助于组织和管理系统文件和数据。\n');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
